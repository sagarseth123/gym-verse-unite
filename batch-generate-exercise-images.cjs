const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'YOUR_GEMINI_API_KEY';
const IMAGE_DIR = path.join(__dirname, 'public', 'images', 'exercise');

// Common exercises that might be generated by AI
const commonExercises = [
  {
    name: 'lateral_raise',
    description: 'A person performing a lateral raise with dumbbells, arms out to the sides, standing in a gym, clear background, no text.'
  },
  {
    name: 'tricep_pushdown',
    description: 'A person doing a tricep pushdown on a cable machine, elbows at sides, pushing the bar down, gym background, no text.'
  },
  {
    name: 'overhead_extension',
    description: 'A person performing an overhead triceps extension with a dumbbell, arms extended above head, gym background, no text.'
  },
  {
    name: 'barbell_sides',
    description: 'A person holding a barbell at their sides, standing upright, gym background, no text.'
  },
  {
    name: 'dumbel_sides',
    description: 'A person holding dumbbells at their sides, standing upright, gym background, no text.'
  },
  {
    name: 'leg_extension',
    description: 'A person using a leg extension machine, extending legs forward, gym background, no text.'
  },
  {
    name: 'leg_curl',
    description: 'A person using a leg curl machine, curling legs back, gym background, no text.'
  },
  {
    name: 'front_raise',
    description: 'A person performing a front raise with dumbbells, arms lifting straight in front, gym background, no text.'
  },
  {
    name: 'rear_delt',
    description: 'A person performing a rear delt fly with dumbbells, bent over, arms out to sides, gym background, no text.'
  },
  {
    name: 'chest_fly',
    description: 'A person performing a chest fly on a machine or with dumbbells, arms wide, gym background, no text.'
  }
];

// Utility: Generate or fetch local image for an exercise
async function getOrGenerateExerciseImage(exerciseName, description = '') {
  try {
    // Sanitize exercise name for URL
    const sanitizedName = exerciseName.toLowerCase()
      .replace(/[^a-z0-9]/g, '_')
      .replace(/_+/g, '_')
      .replace(/^_|_$/g, '');
    
    const fileName = sanitizedName + '.png';
    const filePath = path.join(IMAGE_DIR, fileName);
    const publicPath = `/images/exercise/${fileName}`;

    // Ensure the directory exists
    if (!fs.existsSync(IMAGE_DIR)) {
      fs.mkdirSync(IMAGE_DIR, { recursive: true });
    }

    // Check if image exists
    if (fs.existsSync(filePath)) {
      console.log(`Found existing image for ${exerciseName}: ${publicPath}`);
      return publicPath;
    }

    // Generate image with Gemini
    console.log(`Generating image for exercise: ${exerciseName}`);
    const prompt = `Create a high-quality, professional, app-ready illustration of a person performing the exercise: ${exerciseName}. The background should be white. The person should be clearly demonstrating the correct form for: ${exerciseName}. Highlight the main muscles worked. Style: clear, anatomical, instructional. Description: ${description}`;
    
    const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent?key=${GEMINI_API_KEY}`;
    const body = {
      contents: [{ parts: [{ text: prompt }] }],
      generationConfig: {
        responseModalities: ["IMAGE", "TEXT"],
        temperature: 0.7
      }
    };
    
    const response = await fetch(geminiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini image API error:', errorText);
      return '/images/exercise/default.png';
    }
    
    const data = await response.json();
    console.log(`Gemini API response for ${exerciseName}:`, JSON.stringify(data, null, 2));
    
    // Check for image data in the response
    const candidates = data.candidates || [];
    for (const candidate of candidates) {
      const parts = candidate.content?.parts || [];
      for (const part of parts) {
        if (part.inlineData && part.inlineData.data) {
          // Save the base64 image data to file
          fs.writeFileSync(filePath, Buffer.from(part.inlineData.data, 'base64'));
          console.log(`Generated and saved image for ${exerciseName}: ${publicPath}`);
          return publicPath;
        }
      }
    }
    
    console.log(`No image data found in response for ${exerciseName}`);
    return '/images/exercise/default.png';
  } catch (error) {
    console.error(`Error processing image for ${exerciseName}:`, error);
    return '/images/exercise/default.png';
  }
}

// Main function to batch generate images
async function batchGenerateImages() {
  console.log('Starting batch image generation...');
  console.log(`Image directory: ${IMAGE_DIR}`);
  console.log(`Total exercises to process: ${commonExercises.length}`);
  
  const results = [];
  
  for (let i = 0; i < commonExercises.length; i++) {
    const exercise = commonExercises[i];
    console.log(`\n[${i + 1}/${commonExercises.length}] Processing: ${exercise.name}`);
    
    try {
      const imageUrl = await getOrGenerateExerciseImage(exercise.name, exercise.description);
      results.push({
        name: exercise.name,
        imageUrl,
        success: true
      });
      console.log(`✓ Success: ${exercise.name} -> ${imageUrl}`);
      
      // Add a small delay to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.error(`✗ Error processing ${exercise.name}:`, error);
      results.push({
        name: exercise.name,
        imageUrl: '/images/exercise/default.png',
        success: false,
        error: error.message
      });
    }
  }
  
  // Summary
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  
  console.log('\n=== BATCH GENERATION SUMMARY ===');
  console.log(`Total processed: ${results.length}`);
  console.log(`Successful: ${successful}`);
  console.log(`Failed: ${failed}`);
  
  if (failed > 0) {
    console.log('\nFailed exercises:');
    results.filter(r => !r.success).forEach(r => {
      console.log(`  - ${r.name}: ${r.error}`);
    });
  }
  
  // Save results to file
  const resultsFile = path.join(__dirname, 'batch-generation-results.json');
  fs.writeFileSync(resultsFile, JSON.stringify(results, null, 2));
  console.log(`\nResults saved to: ${resultsFile}`);
  
  return results;
}

// Run the batch generation
if (require.main === module) {
  batchGenerateImages()
    .then(() => {
      console.log('\nBatch generation completed!');
      process.exit(0);
    })
    .catch(error => {
      console.error('Batch generation failed:', error);
      process.exit(1);
    });
}

module.exports = { batchGenerateImages, getOrGenerateExerciseImage }; 